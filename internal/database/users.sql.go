// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createuser = `-- name: Createuser :one
INSERT INTO users (id, created_at, updated_at, name)
  VALUES ($1, $2, $3, $4)
RETURNING
  id, created_at, updated_at, name
`

type CreateuserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) Createuser(ctx context.Context, arg CreateuserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createuser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const deleteusers = `-- name: Deleteusers :exec
DELETE FROM users
`

func (q *Queries) Deleteusers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteusers)
	return err
}

const getuser = `-- name: Getuser :one
SELECT
  id, created_at, updated_at, name
FROM
  users
WHERE
  name = $1
`

func (q *Queries) Getuser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getuser, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
	)
	return i, err
}

const getusers = `-- name: Getusers :many
SELECT
  id, created_at, updated_at, name
FROM
  users
`

func (q *Queries) Getusers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getusers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
